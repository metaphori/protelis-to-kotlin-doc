module protelis:coord:accumulation
import protelis:coord:meta
import protelis:coord:spreading
import protelis:lang:utils
import protelis:state:time

module protelis:lang:utils
import java.lang.Math.pow

/**
 * @param a bool, first condition
 * @param b bool, second condition
 * @return  bool, true if both the conditions are true
 */
public def and(a, b) {
    a && b
}

///**
// * Build a field from a value.
// *
// * Return type: (any) -> any.
// * @param value value to be fielded
// * @return field of the given value
// */
//public def field(v) {
//    nbr(v)
//}

/**
 * Line-of-sight detector.
 *
 * @param a T, value
 * @return  bool, true if there is at least a neighbor respect to x, false otherwise
 */
public def canSee(a) {
    anyHood(nbr(a))
}

///**
// * Return type: (fun) -> fun.
// * @param f function
// * @return g(f(args))
// */
//public def composeF(f) {
//    () -> { f.apply() }
//}
//
///**
// * Return type: (any) -> fun.
// * @param a value to be composed as a function
// * @return a function which returns a
// */
//public def composeV(a) {
//    () -> { a }
//}

/**
 * @param x      num, value to be denormalized
 * @param oldmin num, oldmin
 * @param oldmax num, oldmax
 * @param newmin num, newmin
 * @param newmax num, newmax
 * @return       num, denormalized value
 */
public def denormalize(x, oldmin, oldmax, newmin, newmax) {
    x * (newmax - newmin) / (oldmax - oldmin) + (newmin - oldmin)
}

/**
 * @param a num, first field
 * @param b num, second field
 * @return  num, difference between two fields
 */
public def diff(a, b) {
    a - b
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is equal to b, false otherwise
 */
public def equal(a, b) {
    a == b
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is greater than b, false otherwise
 */
public def greaterThan(a, b) {
    a > b
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is greater than or equal to b, false otherwise
 */
public def greaterEqual(a, b) {
    a >= b
}

/**
 * *-hood wrapper.
 *
 * @param local        T, local value
 * @param aggregator   (T, T) -> T, how to reduce information
 * @param default      T, default value in case the field returned by fieldBuilder is empty
 * @param fieldBuilder () -> T, return which field should be reduced
 * @return             T, reduced value
 */
public def hoodW(local, aggregator, default, fieldBuilder) {
    aggregator.apply(local,
        hood(
            (a, b) -> { aggregator.apply(a, b) },
            default,
            fieldBuilder.apply()
        )
    )
}

/**
 * Stateful *-hood wrapper.
 *
 * @param local        T, local value
 * @param aggregator   (T, T) -> T, how to reduce information
 * @param default      T, default value in case the field returned by fieldBuilder is empty
 * @param fieldBuilder (T) -> T, return which field should be reduced
 * @return             T, reduced value
 */
public def hoodWstateful(local, aggregator, default, fieldBuilder) {
    rep (v <- local) {
        aggregator.apply(local,
            hood(
                (a, b) -> { aggregator.apply(a, b) },
                default,
                fieldBuilder.apply(v)
            )
        )
    }
}

/**
 * @param a T, value to be returned
 * @return  T, the same value
 */
public def identity(a) {
    a
}

/**
 * Verify if a device is on the edge of a spatial region.
 *
 * @param condition bool, how to discriminate a region
 * @return          bool, true if the device is on the edge, false otherwise
 */
 public def isEdge(condition) {
     !(allHood(nbr(condition)) || allHood(!nbr(condition)))
 }

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is less than b, false otherwise
 */
public def lessThan(a, b) {
    a < b
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is less than or equal to b, false otherwise
 */
public def lessEqual(a, b) {
    a <= b
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  T, maximum between the two fields
 */
public def max(a, b) {
    mux (a > b) {
        a
    } else {
        b
    }
}

/**
 * @param a num, first field
 * @param b num, second field
 * @return  num, mean of the two fields
 */
public def mean(local, field) {
    (local + field) / 2
}

/**
 * @param a num, first field
 * @param b num, second field
 * @return  num, minimum between the two fields
 */
public def min(a, b) {
    mux (a < b) {
        a
    } else {
        b
    }
}

/**
 * @return node's UID
 */
public def getUID() {
    self.getDeviceUID().toString()
}

/**
 * Norm of a numeric tuple.
 *
 * @param tuple [num], tuple
 * @param p     num, pow
 * @return      num, norm of a numeric tuple
 */
public def norm(tuple, p) {
    pow(
        tuple
            .map(self, (a) -> { pow(a, p) })
            .reduce(self, 0, (a, b) -> { a + b }),
        1/p
    )
}

/**
 * @param a bool, first condition
 * @return  bool, negated condition
 */
public def not(a) {
    !a
}

/**
 * @param a T, first field
 * @param b T, second field
 * @return  bool, true if a is not equal to b, false otherwise
 */
public def notEqual(a, b) {
    a != b
}

/**
 * @param a bool, first condition
 * @param b bool, second condition
 * @return  bool, true if one of the conditions is true
 */
public def or(a, b) {
    a || b
}

/**
 * @param x   num, value
 * @param min num, lower bound
 * @param max num, upper bound
 * @return    num, scale x with respect to the range
 */
public def range(x, min, max) {
    x * (max - min) + min
}

/**
 * @param a num, summand
 * @param b num, summand
 * @return  num, sum of two fields
 */
public def sum(a, b) {
    a + b
}

/**
 * @param a [T], tuple
 * @param b [T], tuple
 * @return  [T], concatenation of two tuples
 */
public def union(a, b) {
    a.union(b)
}

/**
 * @return num, 0
 */
public def zero() {
    0
}

/**
 * Aggregation of local information.
 *
 * @param local  T, local information
 * @param reduce (T, T) -> T, how to aggregate information
 */
public def aggregation(local, reduce) {
    hood((a, b) -> { reduce.apply(a, b) }, local, nbr(local))
}

/**
 * Estimate and broadcast the average value within a spatial region.
 *
 * @param sink  bool, whether the device is the root of the spanning tree
 * @param local num,  local value
 * @return      num,  average value
 */
public def average(sink, value) {
    summarizeWithPotentialExt(
        distanceTo(sink), 0, sum,
        (a) -> { a.get(0) / a.get(1) },
        [value, 1],
        [0, 0]
    )
}

/**
 * Estimate the average value across a bounded spatial region.
 *
 * @param sink  bool, whether the device is the root of the spanning tree
 * @param local num,  local value
 * @param range num,  region range
 * @param null  num,  default value
 * @return      num,  average value
 */
public def boundAverage(sink, local, range, null) {
    boundSpreading(
        closerThan(sink, range),
        () -> { average(sink, local) },
        null
    )
}

/**
 * Aggregate a field of type T within a spanning tree built according to the maximum
 * decrease in potential. Accumulate the potential according to the reduce function.
 *
 * @param potential num, gradient of which gives aggregation direction
 * @param reduce    (T, T) -> T, function
 * @param local     T, local value
 * @param null      T, evaluated when the field is empty
 * @return          T, aggregated value
 */
public def C(potential, reduce, local, null) {
    share (v <- local) {
        reduce.apply(local,
            /*
             * TODO: switch to accumulateHood
             */
            hood(
                (a, b) -> { reduce.apply(a, b) },
                // expression that will be evaluated if the field is empty
                null,
                mux (nbr(getParent(potential, x -> { x.getDeviceUID() })) == self.getDeviceUID()) {
                    v
                } else { null }
            )
        )
    }
}

/**
 * @param potential num, gradient of which gives aggregation direction
 * @param local     T, local value
 * @param reduce    (T, T) -> T, how to aggregate values
 * @param dividend  (T) -> T, dividend
 * @param divisor   (T) -> T, divisor
 * @param fraction  (T, T) -> T, how to divide dividend by the divisor
 * @param null      T, null value
 * @return          T, aggregated value
 */
public def cMultiDivisible(potential, local, null, reduce, dividend, divisor, fraction) {
    hoodWstateful(local, reduce, null, (v) -> {
         mux (potential >= nbr(potential)) {
                 null
        } else {
            nbr(fraction.apply(dividend.apply(v), divisor.apply(v)))
        }
    })
}

/**
 * @param potential num, accumulate values descending this potential
 * @param f         (T, T) -> T, how to accumulate values
 * @param local     T, local value
 * @param default   T, default value
 * @return          T, accumulated value
 */
public def cMultiIdempotent(potential, f, local, default) {
    hoodWstateful(local, f, default, (v) -> {
         mux (potential < nbr(potential)) { nbr(v) } else { default }
    })
}

/**
 * The potential-source converges to the min value.
 *
 * @param potential num, minimize values descending this potential
 * @param local     num, value
 * @return          num, minimum value
 */
public def cMultiMin(potential, local) {
    cMultiIdempotent(potential, min, local, Infinity)
}

/**
 * The potential-source converges to the max values.
 *
 * @param potential num, minimize values descending this potential
 * @param local     num, value
 * @return          num, maximum value
 */
public def cMultiMax(potential, local) {
     -cMultiMin(potential, -local)
}

/**
 * The potential-source converges to the sum of other device values.
 * C  collects  values  over  a  spanning  tree.  Even  small  perturbations
 * can  cause  loss  or  duplication  of  values  with
 * major transient impact on its result. When the accumulation
 * operation for C is either idempotent (e.g., logical and, or)
 * or  separable  (e.g.,  summation),  this  can  be  mitigated  by
 * using all paths down the potential function rather than just
 * one. Can implement  any  other  idempotent  or  separable  function.
 *
 * @param potential num, sum values descending this potential
 * @param local     num, value
 * @return          num, aggregated value
 */
public def cMultiSum(potential, local) {
     cMultiDivisible(
         potential,
         local,
         0,
         sum,
         (v) -> { v },
         (v) -> { sumHood(
             mux (nbr(potential) < potential) { nbr(local) } else { 0 }
         ) },
         (dividend, divisor) -> { dividend / divisor }
     )
}

/**
 * Devices agree on a common value.
 *
 * @param init  num, initial device value
 * @param f     (num) -> num, how to determine consensus
 * @return      num, shared value
 */
public def consensus(init, f) {
     share (val, nbrVal <- init) {
         // val + f.apply(sumHood PlusSelf(nbrVal - val))
         val + f.apply(sumHood(nbrVal - val))
     }
}

/**
 * Gossip a value manipulated according to f.
 *
 * @param sink  bool, whether the device is the root of the spanning tree
 * @param value T, what to gossip
 * @param f     (T, T) -> T, how to manipulate value
 * @return      T, the value resulting from gossip
 */
public def cossip(sink, value, f) {
    summarize(sink, f, value, value)
}

/**
 * Count the devices.
 *
 * @param potential num, gradient of which gives aggregation direction
 * @return          num, number of devices
 */
public def countDevices(potential) {
    C(potential, sum, 1, 0)
}

/**
 * Count the devices in a region.
 *
 * @param potential num, gradient of which gives aggregation direction
 * @param condition bool, device discriminant
 * @param region    bool, region discriminant
 * @return          num, number of devices
 */
public def countDevicesInRegion(potential, condition, region) {
    boundSpreading(region, () -> { countDevicesWithCondition(potential, condition) }, 0)
}

/**
 * Count the devices with a given condition.
 *
 * @param potential num, gradient of which gives aggregation direction
 * @param condition bool, discriminant
 * @return          num, number of devices
 */
public def countDevicesWithCondition(potential, condition) {
    C(potential, sum, if (condition) { 1 } else { 0 }, 0)
}

/**
 * Gossip and estimate the diameter of the connected component joined by
 * the current device.
 *
 * @param source    bool, source of the connected component
 * @return diameter num, of the connected component
 */
public def diameter(source) {
    diameterWithMetric(source, nbrRangeHop)
}

/**
 * Gossip and estimate the diameter of the connected component joined by
 * the current device.
 *
 * @param source    bool, source of the connected component
 * @param metric    () -> num, metric
 * @return diameter num, of the connected component
 */
public def diameterWithMetric(source, metric) {
    let d = distanceToWithMetric(source, metric);
    2 * share (maxd <- 0) {
        max(if (d < Infinity) { d } else { 0 }, maxHood(maxd))
    }
}

/**
 * Gossip and estimate the diameter of the connected component joined by
 * the current device.
 *
 * @param source    bool, source of the connected component
 * @return diameter num, of the connected component
 */
public def diameterInRegion(source, region) {
    diameterInRegionWithMetric(source, region, nbrRangeHop)
}

/**
 * Gossip and estimate the diameter of the connected component joined by
 * the current device.
 *
 * @param source    bool, source of the connected component
 * @return diameter num, of the connected component
 */
public def diameterInRegionWithMetric(source, region, metric) {
    boundSpreading(region, () -> { diameterWithMetric(source, metric) }, 0)
}

/**
 * Apply function to the all the children which potential is greater or equale to
 * the potential of the current device. A child may have multiple parents.
 *
 * @param potential num, potential to be followed
 * @param function  (T) -> T, function to be applied to the children value
 * @param default   T, default value for devices which are not children
 * @return          [num|ExecutionContext, T]
 */
public def getAllChildren(potential, f, g, default) {
    getChildrenExtended(
        potential,
        () -> { nbr(potential) >= potential },
        f,
        g,
        default
    )
}

/**
 * Get the ids of all the children with a potential greater or equal the pontential of the
 * current device.
 *
 * @param potential num, potential to be followed
 * @return          [num], list of children ids
 */
public def getAllChildrenIds(potential) {
    idUnion(
        getAllChildren(
            potential,
            (device) -> { device.getDeviceUID() },
            () -> { NaN },
            NaN
        ).get(0)
    )
}

/**
 * Apply function to the children of the current device. Use this function if every
 * child has a single parent, see getAllChildren otherwise.
 *
 * @param potential num, potential to be followed
 * @param f         (ExecutionContext) -> T', function to be applied to the child
 * @param g         (T) -> T, function to be applied to the child value
 * @param default   T, default value for devices which are not children
 * @return          [num|T', T], children
 */
public def getChildren(potential, f, g, default) {
    getChildrenExtended(
        potential,
        () -> { nbr(getParent(potential, identity)) == self },
        f,
        g,
        default
    )
}
